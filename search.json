[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fastprogress",
    "section": "",
    "text": "A fast and simple progress bar for Jupyter Notebook and console. Created by Sylvain Gugger for fast.ai.\n\n\n\nTo install simply use\npip install fastprogress\nor:\nconda install -c fastai fastprogress\nNote that this requires python 3.6 or later.\n\n\n\n\n\nHere is a simple example. Each bar takes an iterator as a main argument, and we can specify the second bar is nested with the first by adding the argument parent=mb. We can then:\n\nadd a comment in the first bar by changing the value of mb.main_bar.comment\nadd a comment in the first bar by changing the value of mb.child.comment\nwrite a line between the two bars with mb.write('message')\n\nfrom fastprogress.fastprogress import master_bar, progress_bar\nfrom time import sleep\nmb = master_bar(range(10))\nfor i in mb:\n    for j in progress_bar(range(100), parent=mb):\n        sleep(0.01)\n        mb.child.comment = f'second bar stat'\n    mb.main_bar.comment = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n    #mb.update_graph(graphs, x_bounds, y_bounds)\n\n\n\n\nTo add a graph that get plots as the training goes, just use the command mb.update_graphs. It will create the figure on its first use. Arguments are:\n\ngraphs: a list of graphs to be plotted (each of the form [x,y])\nx_bounds: the min and max values of the x axis (if None, it will those given by the graphs)\ny_bounds: the min and max values of the y axis (if None, it will those given by the graphs)\n\nNote that it’s best to specify x_bounds and y_bounds, otherwise the box will change as the loop progresses.\nAdditionally, we can give the label of each graph via the command mb.names (should have as many elements as the graphs argument).\nimport numpy as np\nmb = master_bar(range(10))\nmb.names = ['cos', 'sin']\nfor i in mb:\n    for j in progress_bar(range(100), parent=mb):\n        if j%10 == 0:\n            k = 100 * i + j\n            x = np.arange(0, 2*k*np.pi/1000, 0.01)\n            y1, y2 = np.cos(x), np.sin(x)\n            graphs = [[x,y1], [x,y2]]\n            x_bounds = [0, 2*np.pi]\n            y_bounds = [-1,1]\n            mb.update_graph(graphs, x_bounds, y_bounds)\n            mb.child.comment = f'second bar stat'\n    mb.main_bar.comment = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n\nHere is the rendering in console:\n\nIf the script using this is executed with a redirect to a file, only the results of the .write method will be printed in that file.\n\n\n\nHere is an example that a typical machine learning training loop can use. It also demonstrates how to set y_bounds dynamically.\ndef plot_loss_update(epoch, epochs, mb, train_loss, valid_loss):\n    \"\"\" dynamically print the loss plot during the training/validation loop.\n        expects epoch to start from 1.\n    \"\"\"\n    x = range(1, epoch+1)\n    y = np.concatenate((train_loss, valid_loss))\n    graphs = [[x,train_loss], [x,valid_loss]]\n    x_margin = 0.2\n    y_margin = 0.05\n    x_bounds = [1-x_margin, epochs+x_margin]\n    y_bounds = [np.min(y)-y_margin, np.max(y)+y_margin]\n\n    mb.update_graph(graphs, x_bounds, y_bounds)\nAnd here is an emulation of a training loop that uses this function:\nfrom fastprogress.fastprogress import master_bar, progress_bar\nfrom time import sleep\nimport numpy as np\nimport random\n\nepochs = 5\nmb = master_bar(range(1, epochs+1))\n# optional: graph legend: if not set, the default is 'train'/'valid'\n# mb.names = ['first', 'second']\ntrain_loss, valid_loss = [], []\nfor epoch in mb:\n    # emulate train sub-loop\n    for batch in progress_bar(range(2), parent=mb): sleep(0.2)\n    train_loss.append(0.5 - 0.06 * epoch + random.uniform(0, 0.04))\n\n    # emulate validation sub-loop\n    for batch in progress_bar(range(2), parent=mb): sleep(0.2)\n    valid_loss.append(0.5 - 0.03 * epoch + random.uniform(0, 0.04))\n\n    plot_loss_update(epoch, epochs, mb, train_loss, valid_loss)\nAnd the output:\n\n\nCopyright 2017 onwards, fast.ai. Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. A copy of the License is provided in the LICENSE file in this repository."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "fastprogress",
    "section": "",
    "text": "To install simply use\npip install fastprogress\nor:\nconda install -c fastai fastprogress\nNote that this requires python 3.6 or later."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "fastprogress",
    "section": "",
    "text": "Here is a simple example. Each bar takes an iterator as a main argument, and we can specify the second bar is nested with the first by adding the argument parent=mb. We can then:\n\nadd a comment in the first bar by changing the value of mb.main_bar.comment\nadd a comment in the first bar by changing the value of mb.child.comment\nwrite a line between the two bars with mb.write('message')\n\nfrom fastprogress.fastprogress import master_bar, progress_bar\nfrom time import sleep\nmb = master_bar(range(10))\nfor i in mb:\n    for j in progress_bar(range(100), parent=mb):\n        sleep(0.01)\n        mb.child.comment = f'second bar stat'\n    mb.main_bar.comment = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n    #mb.update_graph(graphs, x_bounds, y_bounds)\n\n\n\n\nTo add a graph that get plots as the training goes, just use the command mb.update_graphs. It will create the figure on its first use. Arguments are:\n\ngraphs: a list of graphs to be plotted (each of the form [x,y])\nx_bounds: the min and max values of the x axis (if None, it will those given by the graphs)\ny_bounds: the min and max values of the y axis (if None, it will those given by the graphs)\n\nNote that it’s best to specify x_bounds and y_bounds, otherwise the box will change as the loop progresses.\nAdditionally, we can give the label of each graph via the command mb.names (should have as many elements as the graphs argument).\nimport numpy as np\nmb = master_bar(range(10))\nmb.names = ['cos', 'sin']\nfor i in mb:\n    for j in progress_bar(range(100), parent=mb):\n        if j%10 == 0:\n            k = 100 * i + j\n            x = np.arange(0, 2*k*np.pi/1000, 0.01)\n            y1, y2 = np.cos(x), np.sin(x)\n            graphs = [[x,y1], [x,y2]]\n            x_bounds = [0, 2*np.pi]\n            y_bounds = [-1,1]\n            mb.update_graph(graphs, x_bounds, y_bounds)\n            mb.child.comment = f'second bar stat'\n    mb.main_bar.comment = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n\nHere is the rendering in console:\n\nIf the script using this is executed with a redirect to a file, only the results of the .write method will be printed in that file.\n\n\n\nHere is an example that a typical machine learning training loop can use. It also demonstrates how to set y_bounds dynamically.\ndef plot_loss_update(epoch, epochs, mb, train_loss, valid_loss):\n    \"\"\" dynamically print the loss plot during the training/validation loop.\n        expects epoch to start from 1.\n    \"\"\"\n    x = range(1, epoch+1)\n    y = np.concatenate((train_loss, valid_loss))\n    graphs = [[x,train_loss], [x,valid_loss]]\n    x_margin = 0.2\n    y_margin = 0.05\n    x_bounds = [1-x_margin, epochs+x_margin]\n    y_bounds = [np.min(y)-y_margin, np.max(y)+y_margin]\n\n    mb.update_graph(graphs, x_bounds, y_bounds)\nAnd here is an emulation of a training loop that uses this function:\nfrom fastprogress.fastprogress import master_bar, progress_bar\nfrom time import sleep\nimport numpy as np\nimport random\n\nepochs = 5\nmb = master_bar(range(1, epochs+1))\n# optional: graph legend: if not set, the default is 'train'/'valid'\n# mb.names = ['first', 'second']\ntrain_loss, valid_loss = [], []\nfor epoch in mb:\n    # emulate train sub-loop\n    for batch in progress_bar(range(2), parent=mb): sleep(0.2)\n    train_loss.append(0.5 - 0.06 * epoch + random.uniform(0, 0.04))\n\n    # emulate validation sub-loop\n    for batch in progress_bar(range(2), parent=mb): sleep(0.2)\n    valid_loss.append(0.5 - 0.03 * epoch + random.uniform(0, 0.04))\n\n    plot_loss_update(epoch, epochs, mb, train_loss, valid_loss)\nAnd the output:\n\n\nCopyright 2017 onwards, fast.ai. Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. A copy of the License is provided in the LICENSE file in this repository."
  },
  {
    "objectID": "01_fastprogress.html",
    "href": "01_fastprogress.html",
    "title": "Base class",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "01_fastprogress.html#notebook-progress-bars",
    "href": "01_fastprogress.html#notebook-progress-bars",
    "title": "Base class",
    "section": "Notebook progress bars",
    "text": "Notebook progress bars\n\nsource\n\nNBProgressBar\n\n NBProgressBar (gen, total=None, display=True, leave=True, parent=None,\n                master=None, comment='')\n\nInitialize self. See help(type(self)) for accurate signature.\n\ntst = NBProgressBar(range(100))\nfor i in tst: time.sleep(0.05)\n\n\n\n\n\n\n    \n      \n      100.00% [100/100 00:05&lt;00:00]\n    \n    \n\n\n\ntst = NBProgressBar(range(100))\nfor i in range(50):\n    time.sleep(0.05)\n    tst.update(i)\ntst.on_interrupt()\n\n\n\n\n\n\n    \n      \n      Interrupted\n    \n    \n\n\n\ntst = NBProgressBar(range(100), total='noinfer')\nfor i in range(50):\n    time.sleep(0.05)\n    tst.update(i)\n\n\n\n\n\n\n    \n      \n      [47/? 00:02&lt;?]\n    \n    \n\n\n\nsource\n\n\nNBMasterBar\n\n NBMasterBar (gen, total=None, hide_graph=False, order=None,\n              clean_on_interrupt=False, total_time=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nmb = NBMasterBar(range(5))\nfor i in mb:\n    for j in NBProgressBar(range(10), parent=mb, comment=f'first bar stat'):\n        time.sleep(0.01)\n        #mb.child.comment = f'second bar stat'\n    mb.write(f'Finished loop {i}.')\n\n\n\n\n\nFinished loop 0.Finished loop 1.Finished loop 2.Finished loop 3.Finished loop 4.\n\n\n\nmb = NBMasterBar(range(5))\nmb.update(0)\nfor i in range(5):\n    for j in NBProgressBar(range(10), parent=mb):\n        time.sleep(0.01)\n        #mb.child.comment = f'second bar stat'\n    mb.main_bar.comment = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n    mb.update(i+1)\n\n\n\n\n\nFinished loop 0.Finished loop 1.Finished loop 2.Finished loop 3.Finished loop 4."
  },
  {
    "objectID": "01_fastprogress.html#console-progress-bars",
    "href": "01_fastprogress.html#console-progress-bars",
    "title": "Base class",
    "section": "Console progress bars",
    "text": "Console progress bars\n\nsource\n\nprinting\n\n printing ()\n\nTrue if we want to print progress\n\nsource\n\n\nConsoleProgressBar\n\n ConsoleProgressBar (gen, total=None, display=True, leave=True,\n                     parent=None, master=None, txt_len=60)\n\nInitialize self. See help(type(self)) for accurate signature.\n\ntst = ConsoleProgressBar(range(100))\nfor i in tst: time.sleep(0.05)\n\n |████████████████████████████████████████| 100.00% [100/100 00:05&lt;00:00]\n\n\n\ntst = ConsoleProgressBar(range(100))\nfor i in range(50):\n    time.sleep(0.05)\n    tst.update(i)\ntst.on_interrupt()\n\n |██████████████████----------------------| 47.00% [47/100 00:02&lt;00:02]\n\n\n\ntst = ConsoleProgressBar(range(100), total='noinfer')\nfor i in range(50):\n    time.sleep(0.05)\n    tst.update(i)\n\n |----------------------------------------| [47/? 00:02&lt;?]\n\n\n\nsource\n\n\nprint_and_maybe_save\n\n print_and_maybe_save (line)\n\n\nsource\n\n\nConsoleMasterBar\n\n ConsoleMasterBar (gen, total=None, hide_graph=False, order=None,\n                   clean_on_interrupt=False, total_time=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nmb = ConsoleMasterBar(range(5))\nfor i in mb:\n    for j in ConsoleProgressBar(range(10), parent=mb):\n        time.sleep(0.01)\n        #mb.child.comment = f'second bar stat'\n    mb.main_bar.comment = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n\nFinished loop 0.                                                                  \nFinished loop 1.                                                                  \nFinished loop 2.                                                                  \nFinished loop 3.                                                                  \nFinished loop 4.                                                                  \n\n\n\nmb = ConsoleMasterBar(range(5))\nmb.update(0)\nfor i in range(5):\n    for j in ConsoleProgressBar(range(10), parent=mb):\n        time.sleep(0.01)\n        #mb.child.comment = f'second bar stat'\n    mb.main_bar.comment = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n    mb.update(i+1)\n\n    # confirming a kwarg can be passed to ConsoleMasterBar instance\n    mb.update_graph([[1,2],[3,4]], figsize=(10,5,))\n    mb.show_imgs(figsize=(10,5,))\n\nFinished loop 0.                                                                  \nFinished loop 1.                                                                  \nFinished loop 2.                                                                  \nFinished loop 3.                                                                  \nFinished loop 4.                                                                  \n\n\n\nsource\n\n\nforce_console_behavior\n\n force_console_behavior ()\n\nReturn the console progress bars\n\nsource\n\n\nworkaround_empty_console_output\n\n workaround_empty_console_output ()\n\nChange console output behaviour to correctly show progress in consoles not recognizing at the end of line\n\nfrom nbdev import nbdev_export\nnbdev_export()"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Core",
    "section": "",
    "text": "source\n\n\n\n format_time (t)\n\nFormat t (in seconds) to (h):mm:ss\n\nassert format_time(12) == '00:12'\nassert format_time(512) == '08:32'\nassert format_time(3712) == '1:01:52'\n\n\nsource\n\n\n\n\n html_progress_bar (value, total, label, interrupted=False)\n\nHtml code for a progress bar value/total with label\n\nsource\n\n\n\n\n text2html_table (items)\n\nPut the texts in items in an HTML table."
  },
  {
    "objectID": "core.html#display",
    "href": "core.html#display",
    "title": "Core",
    "section": "",
    "text": "source\n\n\n\n format_time (t)\n\nFormat t (in seconds) to (h):mm:ss\n\nassert format_time(12) == '00:12'\nassert format_time(512) == '08:32'\nassert format_time(3712) == '1:01:52'\n\n\nsource\n\n\n\n\n html_progress_bar (value, total, label, interrupted=False)\n\nHtml code for a progress bar value/total with label\n\nsource\n\n\n\n\n text2html_table (items)\n\nPut the texts in items in an HTML table."
  },
  {
    "objectID": "core.html#detect-if-in-or-out-notebook",
    "href": "core.html#detect-if-in-or-out-notebook",
    "title": "Core",
    "section": "Detect if in or out notebook",
    "text": "Detect if in or out notebook\n\nsource\n\nin_colab\n\n in_colab ()\n\nCheck if the code is running in Google Colaboratory\n\nsource\n\n\nin_notebook\n\n in_notebook ()\n\nCheck if the code is running in a jupyter notebook\n\n# assert IN_NOTEBOOK\nassert not IN_COLAB\n\n\nfrom nbdev import nbdev_export\nnbdev_export()"
  }
]